{"version":3,"sources":["components/Header.js","components/Footer.js","components/WeatherSearch.js","components/WeatherTable.js","components/WeatherDetail.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","WeatherSearch","props","handleChange","e","name","target","value","setState","handleClick","handleSearch","state","country","console","log","type","id","placeholder","this","city","onChange","onClick","React","Component","WeatherTable","list","selectDetail","JSON","stringify","map","item","index","key","Date","dt","toDateString","src","weather","icon","alt","temp","min","max","main","description","WeatherDetail","selectedDetail","day","night","eve","morn","feels_like","pressure","humidity","Main","isLoaded","fetch","then","res","json","result","error","filter","selectedIndex","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c70adf2f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// Stateless of Functional Component\r\nfunction Header() {\r\n  return (\r\n    <header className=\"bg-dark text-light text-center py-5\">\r\n      <h1>Weather App</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\n// Stateless of Functional Component using Arrow Notation\r\nexport const Footer = () => {\r\n  return (\r\n    <footer className=\"bg-dark text-light py-5\">\r\n      <p>Copyright &copy; 2020</p>\r\n    </footer>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nclass WeatherSearch extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    // to create form:\r\n    // 1) create states/variables based on the number of inputs that you have\r\n    //\r\n    this.state = {\r\n      name: \"\",\r\n      country: \"\",\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n    // [name] is a variable from form name and not a state.name\r\n  };\r\n\r\n  // 5) Create a method handleAdd\r\n  handleClick = (e) => {\r\n    // Lifting up state - 3) In child, call the props\r\n    // Lifting up state - 4) Pass the items to be sent to parent in arguments\r\n\r\n    this.props.handleSearch(this.state.name, this.state.country);\r\n\r\n    console.log(\"name: \" + this.state.name);\r\n    console.log(\"country: \" + this.state.country);\r\n\r\n    // let getWeather = async () => {\r\n    //   const api_call = await fetch(\r\n    //     \"https://api.openweathermap.org/data/2.5/forecast/daily?q=\" +\r\n    //       this.state.name +\r\n    //       \"&appid=9fd7a449d055dba26a982a3220f32aa2\"\r\n    //   );\r\n\r\n    //   const response = await api_call.json();\r\n    //   console.log(response);\r\n    // };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"my-5\">\r\n        <h2>Search City:</h2>\r\n        <form>\r\n          <div className=\"mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              placeholder=\"City\"\r\n              value={this.state.city}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              id=\"country\"\r\n              placeholder=\"Country\"\r\n              value={this.state.country}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={this.handleClick}\r\n          >\r\n            Get Weather\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherSearch;\r\n","import React from \"react\";\r\n\r\nfunction WeatherTable({ city, list, selectDetail }) {\r\n  //   handleRowClick = () => {\r\n  //     // Lifting up state - 3) In child, call the props\r\n  //     // Lifting up state - 4) Pass the items to be sent to parent in arguments\r\n\r\n  //     this.props.selectWod(this.key);\r\n  //   };\r\n\r\n  console.log(\"weatherTable list:\" + JSON.stringify(list));\r\n  return (\r\n    <div className=\"my-5\">\r\n      <h2>7-day Forecast for {city.name + \", \" + city.country} </h2>\r\n      <table className=\"table table-bordered table-hover table-striped\">\r\n        <thead>\r\n          <tr className=\"bg-info\">\r\n            <th className=\"text-center\">Date</th>\r\n            <th className=\"text-center\">Temperature &#8451; (Min / Max)</th>\r\n            <th>Weather Description</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {list.map((item, index) => (\r\n            <tr key={index} onClick={() => selectDetail(index)}>\r\n              <td className=\"text-center\">\r\n                {new Date(item.dt * 1000).toDateString()}\r\n              </td>\r\n              <td className=\"text-center\">\r\n                <img\r\n                  src={`http://openweathermap.org/img/wn/${item.weather[0].icon}.png`}\r\n                  alt=\"Weather Icon\"\r\n                />\r\n                {item.temp.min} &#8451; / {item.temp.max} &#8451;\r\n              </td>\r\n              <td>\r\n                {item.weather[0].main + \" : \" + item.weather[0].description}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherTable;\r\n","import React from \"react\";\r\n\r\nconst WeatherDetail = (props) => {\r\n  return (\r\n    <div className=\"card my-5 py-5 px-5\">\r\n      <h2>{props.city.name + \", \" + props.city.country}</h2>\r\n      <h3>{new Date(props.selectedDetail.dt * 1000).toDateString()}</h3>\r\n      <h4>\r\n        {\" \"}\r\n        {props.selectedDetail.weather[0].main +\r\n          \" : \" +\r\n          props.selectedDetail.weather[0].description +\r\n          \" \"}\r\n        <img\r\n          src={`http://openweathermap.org/img/wn/${props.selectedDetail.weather[0].icon}@2x.png`}\r\n          alt=\"Weather Icon\"\r\n        />\r\n      </h4>\r\n      <h4>Temperature:</h4>\r\n      <ul>\r\n        <li>Day: {props.selectedDetail.temp.day} &#8451; </li>\r\n        <li>Min: {props.selectedDetail.temp.min} &#8451; </li>\r\n        <li>Max: {props.selectedDetail.temp.max} &#8451; </li>\r\n        <li>Night: {props.selectedDetail.temp.night} &#8451; </li>\r\n        <li>Evening: {props.selectedDetail.temp.eve} &#8451; </li>\r\n        <li>Morning: {props.selectedDetail.temp.morn} &#8451; </li>\r\n      </ul>\r\n      <h4>Feels Like:</h4>\r\n      <ul>\r\n        <li>Day: {props.selectedDetail.feels_like.day} &#8451; </li>\r\n        <li>Night: {props.selectedDetail.feels_like.night} &#8451; </li>\r\n        <li>Evening: {props.selectedDetail.feels_like.eve} &#8451; </li>\r\n        <li>Morning: {props.selectedDetail.feels_like.morn} &#8451; </li>\r\n      </ul>\r\n      <h4>Pressure: {props.selectedDetail.pressure}</h4>\r\n      <h4>Humidity: {props.selectedDetail.humidity}</h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDetail;\r\n","import React from \"react\";\r\nimport WeatherSearch from \"./WeatherSearch\";\r\nimport WeatherTable from \"./WeatherTable\";\r\nimport WeatherDetail from \"./WeatherDetail\";\r\n\r\nclass Main extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      country: \"\",\r\n      city: [],\r\n      list: [],\r\n      selectedIndex: null,\r\n      selectedDetail: null,\r\n      isLoaded: false,\r\n    };\r\n  }\r\n\r\n  handleSearch = (name, country) => {\r\n    console.log(\"handleSearch \" + name + \", \" + country);\r\n    this.setState({\r\n      name: name,\r\n      country: country,\r\n      isLoaded: false,\r\n    });\r\n\r\n    fetch(\r\n      `https://api.openweathermap.org/data/2.5/forecast/daily?q=${name}&appid=9fd7a449d055dba26a982a3220f32aa2&units=metric`\r\n    )\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            city: result.city, // result[\"city\"] for square bracket notation\r\n            list: result.list, // result[\"list\"]\r\n            isLoaded: true,\r\n          });\r\n          console.log(JSON.stringify(result));\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            city: [],\r\n            list: [],\r\n            isLoaded: true,\r\n            error,\r\n          });\r\n        }\r\n      );\r\n  };\r\n\r\n  selectDetail = (key) => {\r\n    console.log(\"selected index \" + key);\r\n    let selectedDetail = this.state.list.filter((item, index) => key === index);\r\n    console.log(\"selected object: \" + JSON.stringify(selectedDetail[0]));\r\n    this.setState({ selectedDetail: selectedDetail[0], selectedIndex: key });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <WeatherSearch handleSearch={this.handleSearch} />\r\n        {this.state.isLoaded && (\r\n          <WeatherTable\r\n            className=\"container\"\r\n            city={this.state.city}\r\n            list={this.state.list}\r\n            selectDetail={this.selectDetail}\r\n          />\r\n        )}\r\n        {this.state.selectedDetail && (\r\n          <WeatherDetail\r\n            city={this.state.city}\r\n            selectedDetail={this.state.selectedDetail}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport { Footer } from \"./components/Footer\"; // bracket jika guna Arrow Notation\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}